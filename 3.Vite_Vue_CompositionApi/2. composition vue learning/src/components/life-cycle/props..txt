<!--

- <MyComp v-bind:name="amir" />
    - v-bind ==> directive
    - name ==> attribute/argument
    - "amir" ==> static value

- child component: declaring props, using props
- parent component: passing props

- declaring props: const props = defineProps(["fullName"])
- using props: in template {{ fullName }}, in script props.fullName
- passing props: <child-component fullName="Amir Shrestha">
    - Props passing from parent: greeting-message
    - Props declaration and use in child: greetingMessage

- Static props: <child-component fullName="Amir Shrestha">
- Dynamic props: const fullName = ref('Homo Sapiens'); <child-component :fullName="fullName">
    - <MyComp name="Amir" /> static string
    - <MyComp :likes="42" /> static number
    - <MyComp :data="person.bio" /> dynamic data
    - <MyComp is-booked /> boolean
    - <MyComp :is-booked="false" /> boolean
    - <MyComp :is-booked="response.isValid" /> boolean
        <ChildCompoent isLoggedIn="true"/> || <ChildCompoent isLoggedIn/> || <ChildCompoent :isLoggedIn="Logged"/>
    - <MyComp :comment-ids="[1,2,3]" /> array
    - <MyComp :comment-ids="res.ids" /> array
    - <MyComp :bio="{name;"Amir", age:23}" /> object
    - <MyComp :bio="res.data" /> object
    # Binding Multiple Properties Using an Object

    
# Data flow:
    - One-Way Data Flow​ (one-way-down binding)
    - One way data flow from parent to child.
    - Auto update child when value changes in parent
    - Props are read only in child

/**
* Props are read only in child
* But there are usually two cases where it's tempting to mutate a prop:
* 1. The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards. In this case, it's best to define a local data property that uses the prop as its initial value
* 2. The prop is passed in as a raw value that needs to be transformed. In this case, it's best to define a computed property using the prop's value
*/
# Ways to manipualte props in child componenet:
    1. assign prop to local state/data_property; const fullNaam = ref(props.fullName); but here data property fullName will not auto update when props value chnages in parent becuase its just use to assign initial value thhen after its disconnected from props value
    2. manipulated via comuted property; const intro = computed(() => `Hi I am ${props.fullName}.`)
    > Mutating Object / Array Props​: When objects and arrays are passed as props, while the child component cannot mutate the prop binding, it will be able to mutate the object or array's nested properties. This is because in JavaScript objects and arrays are passed by reference, and it is unreasonably expensive for Vue to prevent such mutations.  As a best practice, you should avoid such mutations unless the parent and child are tightly coupled by design.

# Ways to manipualte props in parent componenet:
    - child should emit an event

# Props validation:
    - child component:
        const props = defineProps({
            isLoggedIn: {
                type: Boolean,
                type: customeClassInstanceObject,
                required: true,
                default: 200,
                default(){},
                validator(){ true},
            }
        })

# Reference: https://www.youtube.com/watch?v=xFFewMKeVhs&list=PLbGui_ZYuhih5ItBhn2cTncaS24_Kgeui&index=23&ab_channel=GeekyShows


Q. Any component that relies on that prop will update to reflect the new value. Does here components update means component will re-render? is components update and component re-render same?
    - In the context of Vue.js, when we say that a component "updates" to reflect a new value associated with a prop, we are typically referring to the component "re-rendering" or "re-rendering its template." In Vue, these terms are often used interchangeably.
    - Here's what happens when a component updates due to changes in a prop:
        - Reactivity: When the value associated with a prop changes in the parent component, Vue detects this change through its reactivity system.
        - Component Re-render: Vue triggers the re-rendering of the child component, which means that the component's template is re-evaluated and the virtual DOM is updated.
        - DOM Update: After the virtual DOM is updated, Vue efficiently updates the actual DOM to reflect the changes. This process is optimized to minimize unnecessary DOM manipulations.
    -So, when we talk about a component "updating" to reflect changes in a prop, we are indeed referring to the component "re-rendering" its template to ensure that it displays the updated data correctly. These terms essentially describe the same process of refreshing the component's appearance to match the latest data.

Q. does re-render means component again getting mounted?
    - No, re-rendering a component does not mean the component is getting mounted again. Re-rendering a component means updating the component's view (template) to reflect changes in the data or props without unmounting and remounting the entire component.
    - When a component re-renders:
    - Virtual DOM Update: Vue updates the virtual DOM of the component to reflect the changes in data or props.
    - Diff and Patch: Vue then performs a process known as "diffing" and "patching" to efficiently update the real DOM. It calculates the difference between the new virtual DOM and the previous one and applies only the necessary changes to the actual DOM elements.
    - Lifecycle Hooks: The component's lifecycle hooks, such as beforeUpdate and updated, are called during this process. These hooks allow you to perform actions before and after the component updates.
    - No Unmounting: The component does not go through the full mounting process again, including creating a new instance, invoking created, and mounted lifecycle hooks, or tearing down the old component. The component instance remains the same.
    - Re-rendering is a more efficient way of updating the component's view while keeping the existing component instance intact. This optimization is one of the benefits of using a virtual DOM-based framework like Vue, as it minimizes the amount of work required to reflect changes in the user interface.
