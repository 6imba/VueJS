# store middleware: app.use(store)

- $store.state
- $store.getters
- $store.dispatch()
- $store.commit()

# Different section(objects) in our veuX store:
    - state: store data of our app
    - mutations: defined methods to mutate/change store.state.data. (only way to change or mutate the store.state.datas is by triggering/commiting a mutations_method. We can commit the mutation from anywhere in our app. We cannot write asynchronous code inside mutations. Only trigger synchronous code.) commit ~ triggering mutation
    - actions: defined the asynchronous operation(Api call). Their purpose is not to change/mutate state.data, so they we can access store.state.data inside action but not mutate/change it. If we need to change store.state.data from the actions we need to commit/trigger mutations_methods. (Whereas we can call/trigger actions using dispatch() method.
      - Therefore we commit mutations and dispatch actions.(alternative hooks mapAction,mapMutation. i.e code_eample_1)
    - getters: defined methods to get data from our store_state. we can directly get data from our store using $store.state.data but using getter methods we can change/manipulate/filter the data before rendering data to components.
    - modules: include various breaked_individual_store_modules, with their own state,mutations,actions and getters.

# code_eample_1
<script>
    import { mapGetters,mapActions } from 'vuex'
    export default {
        methods: {
            ...mapActions(["getAllProducts","updateProduct","deleteProduct"]),
        },
        computed: {
            ...mapGetters(["individualState","allProducts_2"]),
        },
    }    
</script>



# store/index.js:

import { createStore } from 'vuex'
import axios from 'axios'

export default createStore({
  state: {
    counter: 0,
    myColor: 'default black'
  },
  mutations: {
    add(state,base){
      state.counter = state.counter + base
    },
    sub(state,base){
      state.counter = state.counter - base
    },
  },
  actions: {
    async getIncreaseBase({commit}){
      const response = await axios.get('https://www.randomnumberapi.com/api/v1.0/random?min=1&max=10&count=1')
      commit('add',response.data[0])
    },
    getColorToBeChanged({commit}, newValue){
      commit('changeColor',newValue)
    }
  },
  getters: {
    squareCounter: state => state.counter ** 2
  },
  modules: {
  }
})

